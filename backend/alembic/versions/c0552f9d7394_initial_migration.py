"""initial migration

Revision ID: c0552f9d7394
Revises:
Create Date: 2025-07-11 22:01:07.904452

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'c0552f9d7394'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('canvas_id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('access_token', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('refresh_token', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('token_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('onboarding_completed', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_canvas_id'), 'user', ['canvas_id'], unique=True)
    op.create_table('quiz',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('owner_id', sa.Uuid(), nullable=False),
    sa.Column('canvas_course_id', sa.Integer(), nullable=False),
    sa.Column('canvas_course_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('selected_modules', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('question_count', sa.Integer(), nullable=False),
    sa.Column('llm_model', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('llm_temperature', sa.Float(), nullable=False),
    sa.Column('language', sa.Enum('ENGLISH', 'NORWEGIAN', name='quizlanguage'), nullable=False),
    sa.Column('status', sa.Enum('CREATED', 'EXTRACTING_CONTENT', 'GENERATING_QUESTIONS', 'READY_FOR_REVIEW', 'EXPORTING_TO_CANVAS', 'PUBLISHED', 'FAILED', name='quizstatus'), nullable=False),
    sa.Column('failure_reason', sa.Enum('CONTENT_EXTRACTION_ERROR', 'NO_CONTENT_FOUND', 'LLM_GENERATION_ERROR', 'NO_QUESTIONS_GENERATED', 'CANVAS_EXPORT_ERROR', 'NETWORK_ERROR', 'VALIDATION_ERROR', name='failurereason'), nullable=True),
    sa.Column('last_status_update', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('extracted_content', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('content_extracted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('canvas_quiz_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('exported_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('generation_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_quiz_canvas_course_id'), 'quiz', ['canvas_course_id'], unique=False)
    op.create_index(op.f('ix_quiz_failure_reason'), 'quiz', ['failure_reason'], unique=False)
    op.create_index(op.f('ix_quiz_owner_id'), 'quiz', ['owner_id'], unique=False)
    op.create_index(op.f('ix_quiz_status'), 'quiz', ['status'], unique=False)
    op.create_table('question',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('quiz_id', sa.Uuid(), nullable=False),
    sa.Column('question_type', sa.Enum('MULTIPLE_CHOICE', 'SHORT_ANSWER', 'FILL_IN_BLANK', name='questiontype'), nullable=False),
    sa.Column('question_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('difficulty', sa.Enum('EASY', 'MEDIUM', 'HARD', name='questiondifficulty'), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_approved', sa.Boolean(), nullable=False),
    sa.Column('approved_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('canvas_item_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['quiz_id'], ['quiz.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_question_difficulty'), 'question', ['difficulty'], unique=False)
    op.create_index(op.f('ix_question_is_approved'), 'question', ['is_approved'], unique=False)
    op.create_index(op.f('ix_question_question_type'), 'question', ['question_type'], unique=False)
    op.create_index(op.f('ix_question_quiz_id'), 'question', ['quiz_id'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_question_quiz_id'), table_name='question')
    op.drop_index(op.f('ix_question_question_type'), table_name='question')
    op.drop_index(op.f('ix_question_is_approved'), table_name='question')
    op.drop_index(op.f('ix_question_difficulty'), table_name='question')
    op.drop_table('question')
    op.drop_index(op.f('ix_quiz_status'), table_name='quiz')
    op.drop_index(op.f('ix_quiz_owner_id'), table_name='quiz')
    op.drop_index(op.f('ix_quiz_failure_reason'), table_name='quiz')
    op.drop_index(op.f('ix_quiz_canvas_course_id'), table_name='quiz')
    op.drop_table('quiz')
    op.drop_index(op.f('ix_user_canvas_id'), table_name='user')
    op.drop_table('user')
    # ### end Alembic commands ###
